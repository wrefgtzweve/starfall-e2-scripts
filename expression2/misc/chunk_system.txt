@name Chunk system
@inputs 
@outputs 
@persist Pent:array Scan:number Ptot:number Broken:number Chunk:number LoopPos:number N:number
@trigger 

#----------------#
# Made by Redox  # https://github.com/wrefgtzweve/starfall-e2-scripts
#----------------#

if(first())
{
    LoopPos=0
    Chunk=50
    #findIncludePlayerProps(owner())
    findSortByDistance(entity():pos())
    findByClass("prop_physics")
    Pent = findToArray()
    Ptot = Pent:count()
    print(Ptot+" Props scanned, processing now")
    timer("chunk",1)
    N = 0
}

if(clk("chunk"))
{
    print(_HUD_PRINTCENTER,"Processing: "+floor((LoopPos/Ptot)*100)+"%")
    for(I=LoopPos,Chunk)
    {
        N++
        
        holoCreate( N, Pent[N,entity]:pos(), vec( randint(0.5,2), randint(0.5,2), randint(0.5,2) ), Pent[N,entity]:angles() )
        holoModel( N, Pent[N,entity]:model() )
        holoMaterial( N, Pent[N,entity]:getMaterial() )
        holoColor( N, Pent[N,entity]:getColor() )
        holoParent( N, Pent[N,entity] )
        holoAng( N, ang( randint(1,255), randint(1,255), randint(1,255) ))
        
        if(I==Chunk)
        {
            LoopPos+=50
            Chunk+=50
            timer("chunk",500)
            break
        }
        if(I == Ptot)
        {
            print(_HUD_PRINTCENTER,"Processing: "+100+"%")
            stoptimer("chunk")
            LoopPos=0
            Chunk=50
            break
        }
    }
}
