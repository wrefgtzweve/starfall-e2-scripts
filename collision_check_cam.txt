--@name Collision check cam
--@author Redox
--@client
    
local canAng = true
local speed = 10
local holo = holograms.create(chip():getPos()+Vector(0,0,70), chip():getAngles() + Angle(0,-90,0), "models/holograms/cube.mdl", Vector(1,1,1))

net.start("holorsend")
net.writeEntity(holo)
net.send()

local function collisionCheck(holo)
    local holoPos = holo:getPos()
    local holoForward = holo:getForward()
    --local hullTrace = trace.trace( holoPos, holoForward * 200)
    local hullTrace = trace.traceHull( holoPos, holoPos + holoForward * 50 , holo:obbMins(), holo:obbMaxs(), holo, nil, nil, false)
    if hullTrace.Hit == true and canAng then
        local val = math.random(1,2)
        if val == 1 then
            holo:setAngles(holo:getAngles()+Angle(0,-90,0))
        else
            holo:setAngles(holo:getAngles()+Angle(0,90,0))
        end
    end
    holo:setPos( holoPos + holoForward * speed )
end

hook.add("Think", "moveHologramForward", function()
    collisionCheck(holo)
end)

render.createRenderTarget("rt")
local mat = material.create("gmodscreenspace")
mat:setTextureRenderTarget("$basetexture", "rt")

hook.add("renderscene","render",function()
    if quotaAverage() > quotaMax()*0.6 then 
        return 
    end
    render.selectRenderTarget("rt")
    render.renderView({
        origin = holo:getPos(),
        angles = holo:getAngles(),
        x = 0,
        y = 0,
        w = 1024,--1024
        h = 1024,
        drawviewmodel = false,
        drawhud = true,
    })
end)

hook.add("render", "fdhawgefhaw", function()

    if render.isInRenderView() then
        render.drawText(256, 256, "Inception", 1)
        return
    end
    
    render.pushViewMatrix({ type = "3D" })
        render.setMaterial(mat)
        render.setColor(Color(255, 255, 255))
        render.drawTexturedRect(0, 0, 512, 512)
    render.popViewMatrix()
end)