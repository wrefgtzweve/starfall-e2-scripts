--@name trace test
--@author Redox
-- https://github.com/wrefgtzweve/starfall-e2-scripts
--@client
--@model models/maxofs2d/camera.mdl

if player() == owner() then
    enableHud( owner(), true )
end

local fov = 60
local size = 128

local quotaAverage = quotaAverage
local quotaMax = quotaMax
local trace_trace = trace.trace
local trace_aimVector = trace.aimVector
local render_setRenderTargetTexture = render.setRenderTargetTexture
local render_drawTexturedRect = render.drawTexturedRect
local render_drawRectFast = render.drawRectFast
local render_setColor = render.setColor
local render_selectRenderTarget = render.selectRenderTarget
local render_setFilterMag = render.setFilterMag
local render_traceSurfaceColor = render.traceSurfaceColor
local isValid = isValid
local coroutine_yield = coroutine.yield
local coroutine_resume = coroutine.resume
local coroutine_status = coroutine.status

local points = {}
local tracedpoints = {}
local chip = chip()
local chipPos = chip:getPos() + chip:getForward() * 2
local chipAngles = chip:getAngles()
local sunInfo = game.getSunInfo() or Vector( 0.188144, 0.282216, 0.940720 )
local screenMult = 1024 / size
local rtmat = "renderID"
local red = Color( 255, 0, 0 )
local white = Color( 255, 255, 255, 255 )
local skyboxColor = Color( 153, 204, 255, 255 )
render.createRenderTarget( rtmat )

local traceIgnore = find.allPlayers()
table.insert( traceIgnore, chip )

local function generatePoints()
    for x = 0, size do
        tracedpoints[{ screenx = x * screenMult, screeny = 1 }] = red
        for y = 0, size do
            coroutine_yield()
            points[math.random( 1, 9999999999 )] = {
                screenx = x,
                screeny = y,
                traceEnd = chipPos + trace_aimVector( chipAngles, fov, x, y, size, size ) * 50000
            }
        end
    end
    coroutine_yield( "done" )
end

local function tracePoint( point )
    local result = trace_trace( chipPos, point.traceEnd, traceIgnore )
    local colorTrace = render_traceSurfaceColor( chipPos, point.traceEnd )

    local screenx = screenMult * point.screenx
    local screeny = screenMult * point.screeny

    local screenpos = { screenx = screenx, screeny = screeny }
    
    local color
    if result.HitSky then
        color = skyboxColor
    else
        local entColor = isValid( result.Entity ) and result.Entity:getColor() or colorTrace
        color = ( result.HitNormal:dot( sunInfo ) + 1 ) / 2 * entColor
    end
    color.a = 255
    tracedpoints[screenpos] = color
end

local function runTracer()
    hook.add( "Think", "traceHook", function()
        while quotaAverage() < quotaMax() * 0.90 do
            local key, point = next( points )
            if not point then
                hook.remove( "Think", "traceHook" )
                print( "Trace done" )
                break
            end
            tracePoint( point )
            points[key] = nil
        end
    end )
end

hook.add( "Render", "renderSquares", function()
    render_setRenderTargetTexture( rtmat )
    render_setFilterMag( 1 )
    render_drawTexturedRect( 0, 0, 512, 512 )
end )

hook.add( "renderoffscreen", "refreshRT", function()
    render_selectRenderTarget( rtmat )

    for point, color in pairs( tracedpoints ) do
        render_setColor( color )
        render_drawRectFast( point.screenx, point.screeny, screenMult, screenMult )
        tracedpoints[point] = nil
    end
end )

hook.add( "postdrawtranslucentrenderables", "drawFOV", function( _, sky )
    if sky then return end
    local ang = chip:getAngles()
    local chipPos = chip:getPos() + chip:getForward() * 2

    render.draw3DLine( chipPos, chipPos + trace_aimVector( ang, fov, size, 0, size, size ) * 50000 )
    render.draw3DLine( chipPos, chipPos + trace_aimVector( ang, fov, 0, size, size, size ) * 50000 )
    render.draw3DLine( chipPos, chipPos + trace_aimVector( ang, fov, 0, 0, size, size ) * 50000 )
    render.draw3DLine( chipPos, chipPos + trace_aimVector( ang, fov, size, size, size, size ) * 50000 )
end )

local co = coroutine.create( generatePoints )
hook.add( "Think", "generatePointsCoroutine", function()
    while quotaAverage() < quotaMax() * 0.90 do
        coroutine_resume( co )
        if coroutine_status( co ) == "dead" then
            print( "Generated " .. table.count( points ) .. " points" )
            hook.remove( "Think", "generatePointsCoroutine" )
            runTracer()
            break
        end
    end
end )
