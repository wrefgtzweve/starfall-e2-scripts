--@name community tracer
--@author Redox
--@shared
--@model models/maxofs2d/camera.mdl
--@include libs/shared_computation.txt

require( "libs/shared_computation.txt" )

if CLIENT then

if player() == owner() then
    enableHud( owner(), true )
end

local fov = 30
local size = 128

local quotaAverage = quotaAverage
local quotaMax = quotaMax
local trace_trace = trace.trace
local trace_aimVector = trace.aimVector
local render_setRenderTargetTexture = render.setRenderTargetTexture
local render_drawTexturedRect = render.drawTexturedRect
local render_drawRectFast = render.drawRectFast
local render_setColor = render.setColor
local render_selectRenderTarget = render.selectRenderTarget
local render_setFilterMag = render.setFilterMag
local isValid = isValid
local coroutine_yield = coroutine.yield
local coroutine_resume = coroutine.resume
local coroutine_status = coroutine.status

local points = {}
local tracedpoints = {}
local doneWork = {}
local chip = chip()
local chipPos = chip:getPos()
local chipAngles = chip:getAngles()
local sunInfo = game.getSunInfo()
local rtmat = "renderID"
local red = Color( 255, 0, 0 )
local white = Color( 255, 255, 255 )
render.createRenderTarget( rtmat )

local traceIgnore = find.allPlayers()
table.insert( traceIgnore, chip )

local function generatePoints()
    for x = 0, size do
        tracedpoints[{ screenx = x * 2, screeny = 1 }] = red
        tracedpoints[{ screenx = x * 2, screeny = 2 }] = red
        for y = 0, size do
            coroutine_yield()
            points[math.random( 1, 9999999999 )] = {
                screenx = x,
                screeny = y,
                traceEnd = chipPos + trace_aimVector( chipAngles, fov, x, y, size, size ) * 10000
            }
        end
    end
    coroutine_yield( "done" )
end

local function tracePoint( point )
    local result = trace_trace( chipPos, point.traceEnd, traceIgnore )

    local screenx = 512 * point.screenx / size
    local screeny = 512 * point.screeny / size

    local screenpos = { screenx = screenx, screeny = screeny }
    local entColor = isValid( result.Entity ) and result.Entity:getColor() or white
    local dotprod = ( result.HitNormal:dot( sunInfo ) + 1 ) / 2 * entColor
    dotprod.a = 255
    doneWork[screenpos] = dotprod
end

local function runTracer()
    hook.add( "Think", "traceHook", function()
        while quotaAverage() < quotaMax() * 0.90 do
            local key, point = next( points )
            if not point then
                hook.remove( "Think", "traceHook" )
                scl.sendResult( doneWork )
                break
            end
            tracePoint( point )
            points[key] = nil
        end
    end )
end

hook.add( "Render", "renderSquares", function()
    render_setRenderTargetTexture( rtmat )
    render_setFilterMag( 1 )
    render_drawTexturedRect( 0, 0, 1024, 1024 )
end )

hook.add( "renderoffscreen", "refreshRT", function()
    render_selectRenderTarget( rtmat )

    for point, color in pairs( tracedpoints ) do
        render_setColor( color )
        render_drawRectFast( point.screenx, point.screeny, 512 / size, 512 / size )
        tracedpoints[point] = nil
    end
end )

hook.add( "postdrawtranslucentrenderables", "drawFOV", function( _, sky )
    if sky then return end
    local pos = chip:getPos()
    local ang = chip:getAngles()

    render.draw3DLine( pos, pos + trace_aimVector( ang, fov, size, 0, size, size ) * 10000 )
    render.draw3DLine( pos, pos + trace_aimVector( ang, fov, 0, size, size, size ) * 10000 )
    render.draw3DLine( pos, pos + trace_aimVector( ang, fov, 0, 0, size, size ) * 10000 )
    render.draw3DLine( pos, pos + trace_aimVector( ang, fov, size, size, size, size ) * 10000 )
end )

scl.registerWorkFunc( function( work )
    points = table.merge( points, work )
    runTracer()
end )

scl.registerResultFunc( function( results )
    tracedpoints = table.merge( tracedpoints, results )
end )

if player() ~= owner() then return end

local function sendWork( ply )
    if not scl.hasFreeWorkers() then return end
    local chunk = {}
    for _ = 1, 200 do
        local key, point = next( points )
        if not point then break end
        chunk[key] = point
        points[key] = nil
    end

    scl.sendWork( chunk )
end

local co = coroutine.create( generatePoints )
hook.add( "Think", "generatePointsCoroutine", function()
    while quotaAverage() < quotaMax() * 0.90 do
        coroutine_resume( co )
        if coroutine_status( co ) == "dead" then
            print( "Generated " .. table.count( points ) .. " points" )
            hook.remove( "Think", "generatePointsCoroutine" )
            timer.create( "masterShare", 2, 0, sendWork )
            break
        end
    end
end )

end -- SERVER TIME!
